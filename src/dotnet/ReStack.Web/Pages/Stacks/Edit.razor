@page "/stacks/{QueryStackId}/edit"
@page "/stacks/add"

@inherits BaseComponent

<PageTitle>@(Stack?.Id == 0 ? "Add" : $"{Stack?.Name} - Edit") - ReStack</PageTitle>

<Page BreadcrumbLinks="BreadcrumbLinks" IsLoading="IsLoading">
    @if (LoadError)
    {
        <p>No stack found, go back to the <a href="/stacks" class="link">overview</a></p>
    }
    else
    {
        @if (Stack is not null)
        {
            <div class="flex flex-wrap justify-between items-start mb-6">
                <div class="flex items-center">
                    @{
                        var url = Stack.Id == 0 ? "/stacks" : $"/stacks/{Stack.Id}";
                    }
                    <a href="@url" class="pe-2 py-2">
                        <Icon Type="FontAwesomeIcons.ArrowLeft" Size="IconSize.Md" />
                    </a>
                    @if (Stack.Id != 0)
                    {
                        <h1 class="text-xl md:text-3xl ms-2">@Stack.Name</h1>
                    }
                </div>
                <div class="w-full flex md:w-fit flex mt-2">
                    @if (Stack.Id != 0)
                    {
                        <button @onclick="SaveAndExecute"
                                class="btn-secondary me-2 md:w-fit">
                            Execute
                        </button>
                    }

                    <button @onclick="async() => await Save(true)"
                            class="btn-primary">
                        Save
                    </button>

                    @if (Stack.Id != 0)
                    {
                        <button @onclick="ToggleEditor"
                                class="rounded text-sm py-3 px-6 hover:text-primary-500">
                            @if (ShowEditor)
                            {
                                <Icon Type="FontAwesomeIcons.Gear" />
                            }
                            else
                            {
                                <Icon Type="FontAwesomeIcons.Code" />
                            }
                        </button>
                    }
                </div>
            </div>

            <div hidden="@(!ShowEditor)">
                <Blace.Components.Editor @ref="Editor"
                                         CssClass="!h-[calc(100vh-11rem)] !overflow-none"
                                         SettingCssStyle="color: var(--main-font-color); background: var(--main-color-500); font-size: .8rem;"
                                         T="Models.StackFile"
                                         ShowSettings="true" />
            </div>

            if (!ShowEditor)
            {
                <div class="flex items-center justify-between text-sm mt-8 mb-4">
                    <div class="flex items-center">
                        <div class="me-4 p-1">
                            <button @onclick="async() => await SelectEditPanel(EditPanel.Settings)"
                                    class="px-1 cursor-pointer border-primary-500 @(SelectedPanel == EditPanel.Settings ? "border-b-4" : string.Empty)">
                                Settings
                            </button>
                        </div>
                        <div class="me-4 p-1">
                            <button @onclick="async() => await SelectEditPanel(EditPanel.Libraries)"
                                    class="px-1 cursor-pointer border-primary-500 @(SelectedPanel == EditPanel.Libraries ? "border-b-4" : string.Empty)">
                                Libraries
                            </button>
                        </div>
                        <div class="me-4 p-1">
                            <button @onclick="async() => await SelectEditPanel(EditPanel.IgnoreRules)"
                                    class="px-1 cursor-pointer border-primary-500 @(SelectedPanel == EditPanel.IgnoreRules ? "border-b-4" : string.Empty)">
                                Ignore rules
                            </button>
                        </div>
                        <div class="me-4 p-1">
                            <button @onclick="async() => await SelectEditPanel(EditPanel.Tags)"
                                    class="px-1 cursor-pointer border-primary-500 @(SelectedPanel == EditPanel.Tags ? "border-b-4" : string.Empty)">
                                Tags
                            </button>
                        </div>
                    </div>
                </div>

                @if (EditContext is not null)
                {
                    <EditForm EditContext="EditContext">

                        <DataAnnotationsValidator />

                        <Panel CssClass="p-4" Visible="SelectedPanel == EditPanel.Settings">
                            <h2 class="text-xs font-bold mb-4">Settings</h2>

                            <div class="">

                                @if (Validations.Any())
                                {
                                    <ul class="validation-errors">
                                        @foreach (var validation in Validations)
                                        {
                                            <li class="validation-message">@validation</li>
                                        }
                                    </ul>
                                }

                                <div class="mb-6">
                                    <label class="mb-4 block">
                                        <span class="text-sm w-full">Name</span>
                                        <InputText @bind-Value="Stack.Name" class="block mt-2 w-full bg-gray-200 dark:bg-neutral-600 text-gray-700 dark:text-gray-100 text-sm border-none rounded py-2 md:py-3 focus:bg-white focus:border-gray-500 focus:ring-0" />
                                    </label>

                                    <div class="mb-4">
                                        <label>
                                            <span class="text-sm w-full">Run as</span>
                                            <InputSelect @bind-Value="Stack.Type" class="block mt-2 w-full bg-gray-200 dark:bg-neutral-600 text-gray-700 dark:text-gray-100 text-sm border-none rounded py-2 md:py-3 focus:bg-white focus:border-gray-500 focus:ring-0">
                                                @foreach (var type in Enum.GetValues<ProgrammingLanguage>())
                                                {
                                                    <option value="@type.ToString()">
                                                        <span class="fs-9">@type</span>
                                                    </option>
                                                }
                                            </InputSelect>
                                        </label>
                                    </div>

                                    <div>
                                        <label class="flex items-center justify-start">
                                            <InputCheckbox @bind-Value="Stack.FailOnStdError" class="me-2" />
                                            <span class="">Fail on std error output</span>
                                        </label>
                                    </div>
                                </div>
                            </div>

                        </Panel>

                        <Panel CssClass="p-4" Visible="SelectedPanel == EditPanel.Libraries">
                            <h2 class="text-xs font-bold mb-4">Libraries</h2>

                            @if (ComponentLibraries is null || !ComponentLibraries.Any())
                            {
                                <p class="text-xs">No libraries found, go <a href="/libraries" class="link">add</a> one.</p>
                            }
                            else
                            {
                                <div class="px-4">
                                    @foreach (var library in ComponentLibraries)
                                    {
                                        <div>
                                            <label class="flex items-center justify-start">
                                                <InputCheckbox @bind-Value="library.InUse" class="me-2 accent-red-500" />
                                                <span class="">@library.Name</span>
                                            </label>
                                        </div>
                                    }
                                </div>
                            }
                        </Panel>

                        <Panel CssClass="p-4" Visible="SelectedPanel == EditPanel.IgnoreRules">
                            <div class="flex justify-between items-start">
                                <div>
                                    <h2 class="text-xs font-bold mb-4">Ignore rules</h2>
                                    <p class="mt-2 mb-3 text-xs italic">Below you can enter a regex value that will ignore errors written to the std-err source. If the regex matches, the log will be marked as info.</p>
                                </div>
                                <div>
                                    <button @onclick="AddIgnoreRule" class="btn-secondary !p-2 !text-xs">Add</button>
                                </div>
                            </div>

                            <div class="">
                                <div class="flex gap-2 items-baseline text-2xs mt-2 mb-1">
                                    <div class="w-full">
                                        <p>Regex</p>
                                    </div>
                                    <div class="min-w-20 text-center">
                                        <p>Enabled</p>
                                    </div>
                                    <div class="min-w-10 text-center">
                                        <p>Delete</p>
                                    </div>
                                </div>

                                <div class="max-h-60 overflow-auto">
                                    @if (Stack.IgnoreRules.Count != 0)
                                    {
                                        @foreach (var rule in Stack.IgnoreRules)
                                        {
                                            <div class="flex gap-2 items-baseline">
                                                <InputText @bind-Value="rule.Value" class="block h-[2rem] mt-2 w-full bg-gray-200 dark:bg-neutral-600 text-gray-700 dark:text-gray-100 text-sm border-none rounded py-2 md:py-3 focus:bg-white focus:border-gray-500 focus:ring-0" />
                                                <label class="min-w-20 text-center">
                                                    <InputCheckbox @bind-Value="rule.Enabled" class="accent-red-500" />
                                                </label>
                                                <div @onclick="async() => await DeleteIgnoreRule(rule)" class="min-w-10 text-center cursor-pointer">
                                                    <span><Icon Type="FontAwesomeIcons.Xmark" Size="IconSize.Sm" /></span>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="w-full h-full flex justify-center items-center min-h-20">
                                            <p class="text-sm md:text-md">No rules found, go <button @onclick="AddIgnoreRule" class="link">add</button> your first one!</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </Panel>

                        <Panel CssClass="p-4" Visible="SelectedPanel == EditPanel.Tags">
                            <h2 class="text-xs font-bold mb-4">Tags</h2>

                            @if (Tags is null || !Tags.Any())
                            {
                                <p class="text-xs">No tags found, go <a href="/tags" class="link">add</a> one.</p>
                            }
                            else
                            {
                                <div class="px-4">
                                    @foreach (var tag in Tags)
                                    {
                                        <div>
                                            <label class="flex items-center justify-start">
                                                <InputCheckbox Value="Stack.Tags.Any(x => x.Id == tag.Id)"
                                                               ValueChanged="async(v) => await TagToggle(v, tag)"
                                                               ValueExpression="() => PlaceHolder"
                                                               class="me-2 accent-red-500" />
                                                <span class="">@tag.Name</span>
                                            </label>
                                        </div>
                                    }
                                </div>
                            }
                        </Panel>

                    </EditForm>
                }

                @if (Stack.Id != 0 && SelectedPanel == EditPanel.Settings)
                {
                    <div class="flex items-center justify-between text-sm mt-8 mb-4">
                        <div class="flex items-center">
                            <div class="me-4 p-1">
                                <button class="me-4 border-b-4 px-1 cursor-pointer border-red-500">Danger zone</button>
                            </div>
                        </div>
                    </div>

                    <Panel CssClass="p-4">

                        <div class="flex justify-between flex-wrap gap-4">
                            <div>
                                <p class="text-lg mb-2">Delete stack?</p>
                                <p class="text-sm italic">This will delete all the jobs and the source file of the script.</p>
                            </div>

                            <button @onclick="Delete"
                                    class="btn-delete">
                                Delete
                            </button>
                        </div>

                    </Panel>
                }
            }
        }
    }
</Page>